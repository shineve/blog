{"pages":[],"posts":[{"title":"CSS Postprocessor","text":"以最知名的 PostCSS 為例，它是一個使用 JavaScript 轉換 CSS 的工具，它提供很多的API來分析、修改CSS的規則，因此它可以被利用來開發各種的工具，在拓展性極高的狀況下，它其實並不局限在於後處理。 以下是較常見的 PostCSS Plugins： autoprefixer: 加入各家瀏覽器的前綴詞（prefix），例如：-webkit-、-moz-。 stylelint: 語法檢查和報錯。 postcss-preset-env: 將先進的功能轉為目前主流瀏覽器所能支援的語法。（類似 Babel） postcss-nested: 提供 CSS Nesting 功能。 cssnano: 在不改變CSS的效果為前提下，對CSS檔案做縮減及優化。 Lost Grid: 讓系統支援 Grid System。（通過 calc() 實現因此支援度很高） 優勢 有彈性、好擴充，因為是以 Plugin 的方式插入，未來若主流瀏覽器支援了這些功能，要拔除特定 plugin 是很容易的。 更輕量，不像 Sass 可能預先綁了許多可能用不到的功能。 速度快。由於 PostCSS 的功能由所掛的 Plugin 數量而定，體積小，因此轉換的速度幾乎比 Sass 快三倍。 相對 CSS Preprocessor，更容易撰寫自己所想要的功能，因為使用 PostCSS 是可以自建 Plugin 而不是修改 Library。 Vue 中 PostCSS 的應用 Vue CLI 中就有使用到上方所提的 autoprefixer，來擴大專案的瀏覽器支援度 。 Vue 中有一個非常實用的 Scoped CSS 功能，讓各個 Component 之間的 CSS 不會互相污染，而這項功能正是透過 PostCSS 的協助來完成的。","link":"/2021/10/03/css-postprocessor/"},{"title":"CSS Preprocessor","text":"以最知名的 Sass 為例，它提供了許多 CSS 語法的擴充，彌補 CSS 在大型專案維護性的不足，讓開發者可以更有結構地撰寫簡潔、清晰且好維護的 CSS 程式碼。 Sass 常用的有幾種功能： Variables：變數中可以儲存顏色、字型或任何 CSS 值。 Nesting：可巢狀 CSS 選擇器，提供清晰的層次結構。 Mixins：可以定義&amp;重用程式碼塊。 Extend：可以在一個選擇器內繼承另一個選擇器。 Operators：可以在 CSS 中使用操作符進行計算。 @if and @else / @for：可以迴圈/條件生成 CSS。 CSS Preprocessor 可以解決什麼問題？01. 文件切分當頁面越來越複雜，需要加載的 CSS 文件也越來越大，我們有必要把大文件切分開來，否則難以維護。傳統的 CSS 文件切分方案基本上就是 CSS 原生的 @import 指令，或在 HTML 中加載多個 CSS 文件，這些方案通常不能滿足性能要求。 CSS Preprocessor擴展了 @import 指令的能力，通過編譯環節將切分後的文件重新合併為一個大文件。這一方面解決了大文件不便維護的問題，另一方面也解決了一堆小文件在加載時的性能問題。 02. CSS Nesting當我們在撰寫 HTML 時，可以輕易的寫出 DOM 之間嵌套的階層結構，但在傳統的 CSS 做不到，需要重複寫許多父元素選擇器。 12345678910111213.nav { margin: auto; width: 1000px; color: #333;} .nav li { float: left; width: 100px;} .nav li a { display: block; text-decoration: none;} 依賴 CSS Preprocessor 可以直接像在寫程式一樣將父子元素這樣一層一層包起來。這樣我們可以很容易地表達出規則之間的層級關係。 12345678910111213.nav { margin: auto; width: 1000px; color: #333; li { float: left; width: 100px; a { display: block; text-decoration: none; } }} 03. CSS 的重複利用Extends / Mixins 讓 CSS 能更好的被複用，以提高 CSS 的可維護性。Extends 與 Mixins 的最大區別就是 Mixins 可以傳入參數，Extends 只是單純繼承，與 TailwindCSS 的 @apply 效果相同 Mixins 1234567891011121314151617// Mixins@mixin square($size, $radius: 0) { width: $size; height: $size; @if $radius != 0 { border-radius: $radius; }}.avatar { @include square(100px, $radius: 4px);}.card { @include square(300px, $radius: 2px);} 123456789101112// Mixins transpiled result.avatar { width: 100px; height: 100px; border-radius: 4px;}.card { width: 300px; height: 300px; border-radius: 2px;} Extends 123456789101112131415161718192021222324252627282930// Extends%message-shared { border: 1px solid #ccc; padding: 10px; color: #333;}%equal-heights { display: flex; flex-wrap: wrap;}.message { @extend %message-shared;}.success { @extend %message-shared; border-color: green;}.error { @extend %message-shared; border-color: red;}.warning { @extend %message-shared; border-color: yellow;} 123456789101112131415161718// Extends transpiled result.warning, .error, .success, .message { border: 1px solid #ccc; padding: 10px; color: #333;}.success { border-color: green;}.error { border-color: red;}.warning { border-color: yellow;} 推薦閱讀風格指南 Sass Style Guide 專案結構 The 7-1 Pattern 1234567891011121314151617181920212223242526272829303132333435363738sass/||– abstracts/ （or utilities/)| |– _variables.scss // Sass Variables| |– _functions.scss // Sass Functions| |– _mixins.scss // Sass Mixins||– base/| |– _reset.scss // Reset/normalize| |– _typography.scss // Typography rules||– components/ (or modules/)| |– _buttons.scss // Buttons| |– _carousel.scss // Carousel| |– _slider.scss // Slider||– layout/| |– _navigation.scss // Navigation| |– _grid.scss // Grid system| |– _header.scss // Header| |– _footer.scss // Footer| |– _sidebar.scss // Sidebar| |– _forms.scss // Forms||– pages/| |– _home.scss // Home specific styles| |– _about.scss // About specific styles| |– _contact.scss // Contact specific styles||– themes/| |– _theme.scss // Default theme| |– _admin.scss // Admin theme||– vendors/| |– _bootstrap.scss // Bootstrap| |– _jquery-ui.scss // jQuery UI|`– main.scss // Main Sass file","link":"/2021/10/03/css-preprocessor/"},{"title":"How Vue Scoped CSS Works?","text":"Vue 中的 Scoped CSS 是透過 HTML 的 data-* attribute 來達成的，data-* attribute 讓我們可以在 HTML Element 上自定義添加一些自己需要用到的屬性名稱，以方便自己容易理解。 123&lt;div class=&quot;example&quot; data-source=&quot;facebook&quot;&gt; &lt;span&gt;Text from Facebook&lt;/span&gt;&lt;/div&gt; 它也支援我們透過 CSS 和 JavaScript 來取得 data-* attribute 的屬性值。 透過 CSS 取得或選取 data-*attribute我們可以透過 CSS Attribute Selectors來選取指定的 Element。 1234/* CSS */.example[data-source=&quot;facebook&quot;] { color: blue;} 使用 JS 取得 data-* attribute 的屬性值當我們要取得 data-* attribute 的屬性值時，我們可以簡單利用 JavaScript 中的 dataset 物件，就可以取得其中的內容。 123// Javascriptconst el = document.querySelector('.example');console.log(el.dataset.source) // facebook Scoped CSS in VueVue 在打包時，每個 .vue 檔的會根使用當前檔案的 hash 來做為 [data-* attribute]，綁定在在每一個 Element 及 CSS selector 上，來達到 Component 之間互不污染的效果。 123456789101112131415161718// Parent.vue //&lt;template&gt; &lt;div class=&quot;example&quot;&gt;I'm a &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default { name: 'Parent', };&lt;/script&gt;// Notice the `scoped` attribute on the style tag.&lt;style scoped&gt; .example { font-size: 1.5em; background-color: blue; }&lt;/style&gt; Transpiled: 1234567891011121314151617// Parent.vue (transpiled) //&lt;template&gt; &lt;div class=&quot;example&quot; data-v-123456&gt;I'm a &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default { name: 'Parent', };&lt;/script&gt;&lt;style scoped&gt; .example[data-v-123456] { font-size: 1.5em; background-color: blue; }&lt;/style&gt;","link":"/2021/10/29/how-vue-css-scoped-works/"}],"tags":[{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"CSS Postprocessor","slug":"CSS-Postprocessor","link":"/tags/CSS-Postprocessor/"},{"name":"PostCSS","slug":"PostCSS","link":"/tags/PostCSS/"},{"name":"CSS Preprocessor","slug":"CSS-Preprocessor","link":"/tags/CSS-Preprocessor/"},{"name":"Sass","slug":"Sass","link":"/tags/Sass/"},{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"Vue","slug":"Vue","link":"/tags/Vue/"}],"categories":[{"name":"Front-End","slug":"Front-End","link":"/categories/Front-End/"}]}